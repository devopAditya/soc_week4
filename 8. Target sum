class Solution {
public:
    const int OFFSET = 2000;
    const int MAX_TARGET = 4000;

    int f(vector<int>& nums, int target, int idx, vector<vector<int>>& memo) {
        if (target + OFFSET < 0 || target + OFFSET > MAX_TARGET)
            return 0;

        if (idx < 0) return (target == 0) ? 1 : 0;

        if (memo[idx][target + OFFSET] != -1)
            return memo[idx][target + OFFSET];

        int minus = f(nums, target - nums[idx], idx - 1, memo);
        int plus = f(nums, target + nums[idx], idx - 1, memo);

        return memo[idx][target + OFFSET] = minus + plus;
    }

    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int>> memo(n, vector<int>(MAX_TARGET + 1, -1));
        return f(nums, target, n - 1, memo);
    }
};
