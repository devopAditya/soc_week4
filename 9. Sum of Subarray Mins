class Solution {
public:
    int M = 1e9+7;
    vector<int> getple(vector<int>& v) {
        int n = v.size();
        vector<int> ple(n);
        stack<int> st;

        for (int i = 0; i < n; i++) {
            while (!st.empty() && v[st.top()] >= v[i]) {
                st.pop();
            }
            ple[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }
        return ple;
    }

    vector<int> getnle(vector<int>& v) {
        int n = v.size();
        vector<int> nle(n);
        stack<int> st;

        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && v[st.top()] > v[i]) {
                st.pop();
            }
            nle[i] = st.empty() ? n : st.top();
            st.push(i);
        }
        return nle;
    }

    int sumSubarrayMins(vector<int>& v) {
        unsigned long long sum = 0;
        vector <int> nle = getnle(v);
        vector <int> ple = getple(v);
        for (int i = 0; i < v.size(); i++) {
            unsigned long long left = (i-ple[i])%M, right = (nle[i]-i)%M;
            sum = (sum + ((v[i] * 1ll * left)%M * 1ll * right)%M)%M;
        }
        return sum;
    }      
};
